library(clarabel)
# Function to match on types using savvy
f <- function(name, type = c("integer", "double", "logical", "string")) {
  type <- match.arg(type)
  c(
    sprintf('settings.%s = ', name),
    sprintf('match key.as_ref() {'),
    sprintf('"%s" => ', name),
    sprintf('   match typed_value {'),
    switch(type,
           integer = c(sprintf('       TypedSexp::Integer(i) => settings.%s = i.as_slice()[0],', name),
                       sprintf('       _ => savvy::io::r_warn("%s should be scalar integer, stays at {:?}", settings.%s)', name, name )
                       ),
           double = c(sprintf('       TypedSexp::Real(f) => settings.%s = f.as_slice()[0],', name),
                      sprintf('       _ => savvy::io::r_warn("%s should be scalar double, stays at {:?}", settings.%s)', name, name )
                      ),
           logical = c(sprintf('       TypedSexp::Logical(b) => settings.%s = b.as_slice_raw()[0] != 0,', name),
                       sprintf('       _ => savvy::io::r_warn("%s should be scalar logical, stays at {:?}", settings.%s)', name, name )
                       )
           ),
    "},"
  )
}
    

s <- clarabel_control()
sn <- names(s)
st <- sapply(s, typeof)

out <- lapply(seq_along(s), function(i) f(sn[i], st[i]))
writeLines(unlist(out), "junk.rs")


function(name, type) {
  c(
    sprintf('"%s" => ', name),
    sprintf('   match typed_value() {'),
    if(type == "integer") {
      c(sprintf('       TypedSexp::Integer(i) => settings.%s = i.as_slice()[0],', name),
        sprintf('       _ => savvy::io::r_warn("%s should be scalar integer")', name),
        "},")
    } else {
      c(sprintf('       TypedSexp::Real(f) => settings.%s = f.as_slice()[0],', name),
        sprintf('       _ => savvy::io::r_warn("%s should be scalar double")', name),
        "},")
    }
  )
}
o<bytecode: 0x7fb6f07b7900>
>   
